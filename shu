//树
---------------------------------------------------------------
//二叉树:度最大为二，结点有左右之分;满二叉树：左右结点都有切叶子结点在同一层;完全二叉树：从左往右最后一层有空缺
//以下采用链表实现
//树->二叉树：最左边孩子结点->左子树结点，兄弟结点->右子树结点（转换后根节点一定没有右子树）
//森林->二叉树：先将树变为二叉树，然后依次连接到二叉树的右子树
//求N个结点可以构成多少个树(动态规划解决)
int main(){
  int size;
  scanf("%d",&size);
  int dp[size+1];
  dp[0]=dp[1]=1;
  for(int i=2;i<=size;i++){
    dp[i]=0;
    for(int j=0;j<i;j++){
       dp[i]+=dp[j]*dp[i-j-1]; 
    }
  }
  printf("%d",dp[size]);
}//又叫卡特兰数，有公式(2n)!/n!x(n+1)!
//构建二叉树
typedef char E;
struct TreeNode{
  E element;
  struct TreeNode * left,right;
};
typedef struct TreeNode * Node;
//二叉树的遍历
void preOrder(Node root){
  if(root==NULL)return;
  printf("%d",root->element);
  preOrder(root->left);
  preOrder(root->right);
}//前序遍历，递归方法
void preOrder(Node root){
  struct Stack head;
  initStack(&head);
  while(root||!isEmpty(&head)){
    while(root){
      printf("%d",root->element);
      pushStack(&head,root);//左边的结点入栈
      root=root->left;
    }
    Node node=popStack(&head);//左边不再有结点就出栈
    root=root->right;
  }
}//前序遍历，栈
void inOrder(Node root){
  if(root==NULL)return;
  inOrder(root->left);
  printf("%d",root->element);//左边的入栈了并没有打印，只打印了左边最后一个，层层递归上去才会继续打印
  inOrder(root->right);
}//中序遍历(数据分布呈现出以中央为核心的效果)，递归方法
void inOrder(Node root){
  struct Stack head;
  initStack(&head);
  while(root||!isEmpty(&head)){
    while(root){
      pushStack(&head,root);//左边的结点入栈
      root=root->left;
    }
    Node node=popStack(&head);//左边不再有结点就出栈
    printf("%d",node->element);//打印的是出栈这个点
    root=root->right;
  }
}//中序遍历，栈
void postOrder(Node root){
  if(root==NULL)return;
  postOrder(root->left);
  postOrder(root->right);
  printf("%d",root->element);
}//后序遍历(数据分布呈现出以中央为核心的效果)，递归方法
void postOrder(Node root){
  struct Stack head;
  initStack(&head);
  while(root||!isEmpty(&head)){
    while(root){
      pushStack(&head,root);//左边的结点入栈
      root->flag=0;
      root=root->left;
    }
    root=head->next->element;//这里是求栈顶元素，右子树还没有遍历于是不能出栈
    if(root->flag==0){
      root->flag=1;
      root=root->right;//赋值1并且遍历右子树
    }else{
      printf("%d",node->element);//左右遍历完就可以打印了
      popStack(&head);
      root=NULL;//如果打印出来就置为空跳过下一轮循环，去找栈顶元素
    }
  }
}//后序遍历，栈：此时需要flag值标明，0为左子树遍历完成，1为右子树遍历完成
void levelOrder(Node root){
  struct Queue queue;
  initQueue(&queue);
  offerQueue(&queue,root);
  while(!isEmpty(&queue)){
    Node node=pollQueue(&queue);
    printf("%c",node->element);
    if(root->left)offerQueue(&queue,root->left);
    if(root->right)offerQueue(&queue,root->right);
  }
}//层序遍历，队列实现(出队时左右结点依次入队)



