//线性表
-------------------------------------------------------------------
//eg.二分搜索
int search(int* nums,int numsSize,int target){
  for(int i=0;i<numsSize;i++)
    if(nums[i]==target)return i;
  return -1;
}//直接遍历
int BinarySearch(int* nums,int target,int left,int right){
  if(left>right)return -1;//特例1
  int mid=(left+right)/2;//特例2
  if(nums[mid]==target)return mid;
  if(nums[mid]<target)
    return BinarySearch(nums,target,mid+1,right);
  else 
    return BinarySearch(nums,target,left,mid-1);
}//log2(n)
-------------------------------------------------------------------
//顺序表
//初始化，获取元素，插入元素，删除元素，获取长度，进阶版数组；可顺序存储，可链式存储
typedef int E;
struct List{
  E * array;
  int capacity;//容量
  int size;//实际存储元素量
};
typedef struct List * ArrayList; 
bool initList(ArrayList list){
  list->array=(E*)malloc(sizeof(E)*10);//申请与容量对应的内存块
  if(list->array==NULL)return 0;//失败
  list->capacity=10;  
  list->size=0;
  return 1;
}
bool insertList(ArrayList list,E element,int index){
  if(index<1||index>list->size+1)return 0;//容量的事情不在这里考虑，这里只考虑要想插入数据，只可能在1到已有的最后一个数据的下一位这size+1的位置插入
  if(list->size==list->capacity){
    int newCapacity=list->capacity+(list->capacity>>1);
    E* newArray=(E*)realloc(list->array,newCapacity*sizeof(E));//原数组和新的大小
    if(newArray==NULL)return 0;//申请失败
    list->array=newArray;
    list->capacity=newCapacity;
  }//容量不足扩容使用，realloc可以申请新的内存并且把旧的数据一起复制到新内存
  for(int i=list->size;i>index-1;--i)//虽然index按序，但数组是按照0起始
    list->array[i]=list->array[i-1];
  list->array[index-1]=element;
  list->size++;
  return 1;
}//注意顺序表的index是按位计算从1开始,也就是我们常用的计数顺序
bool deleteList(ArrayList list,int index){
  if(index<1||index>list->size)return 0;
  for(int i=index-1;i<list->size-1;i++)
    list->array[i]=list->array[i+1];
  list->size--;
  return 1;
}
----------------------------------------------------------------
//链表
//表长未知（表长不包括头结点），不需要申请连续的空间，物理不相连，逻辑相连；带头结点的链表，不带头结点的链表
struct ListNode{
  E element;
  struct ListNode * next;
};
typedef struct ListNode * Node;
void initList(Node node){
  node->next=NULL;
}
bool insertList(Node head,E element,int index){//头结点不存数据
  if(index<1)return 0;
  while(--index){
    head=head->next;//把结点从头结点挪到index-1的位置
    if(head==NULL)return 0;//null就说明插入index位置超过已有链表长度了
  }//插入在index的位置
  Node node=malloc(sizeof(struct ListNode));
  if(node==NULL)return 0;
  node->element=element;
  node->next=head->next;
  head->next=node;
  return 1;
}
bool deleteList(Node head,int index){
  if(index<1)return 0;
  while(--index){
    head=head->next;
    if(head==NULL)return 0;
  }//因为这里到达的是index-1的位置
  if(head->next==NULL)return 0;//index的位置为空
  Node tmp=head->next;
  head->next=head->next->next;
  free(tmp);
  return 1;
}
//双向链表
struct ListNode{
  E element;
  struct ListNode * next;
  struct ListNode * prev;
};
typedef struct ListNode * Node;
void initList(Node node){
  node->next=node->prev=NULL;
}
bool insertList(Node head,E element,int index){
  if(index<1)return 0;
  while(--index){
    head=head->next;
    if(head==NULL)return 0;
  }
  Node node=malloc(sizeof(struct ListNode));
  if(node==NULL)return 0;
  node->element=element;
  if(head->next){是否插入尾部
    head->next->prev=node;
    node->next=head->next;
  }else{
    node->next=NULL;
  }
  head->next=node;
  node->prev=head;
  return 1;
}
bool deleteList(Node head,int index){
  if(index<1)return 0;
  while(--index){
    head=head->next;
    if(head==NULL)return 0;
  }
  if(head==NULL)return 0;
  Node tmp=head->next;
  if(head->next->next){
    head->next=head->next->next;  
    head->next->next->prev=head;
  }else{
    head->next=NULL;    
  }
  free(tmp);
  return 1;
}
--------------------------------------------------------------------
//栈FILO
//顺序表实现栈
struc Stack{
  E * array;
  int capacity;
  int top;//栈顶元素下标
};
typedef struct Stack * ArrayStack;
bool initStack(ArrayStack stack){
  stack->array=malloc(sizeof(E)*10);
  if(stack->array==NULL)return 0;
  stack->capacity=10;
  stack->top=-1;//0指的栈底元素
  return 1;
}
bool pushStack(ArrayStack stack,E element){
  if(stack->top==stack->capacity){//可扩容版本
    int newCapacity=stack->capacity+(stack->capacity>>1);
    E * newArray=realloc(stack->array,newCapacity*sizeof(E));
    if(newArray==NULL)return 0;
    stack->array=newArray;
    stack->capacity=newCapacity;
  }
  stack->array[stack->top+1]=element;
  stack->top++;
  return 1;
}
bool isEmpty(ArrayStack stack){
  return stack->top==-1;
}
E popStack(ArrayStack stack){
  return stack->array[stack->top--];  
}
//链表实现栈
struct LNode{
  E element;
  struct LNode * next;
};
typedef struct LNode * Node;
void initStack(Node head){
  node->next=NULL;
}
bool pushStack(Node head,E element){
  Node node=malloc(sizeof(struct LNode));
  if(node==NULL)return 0;
  node->element=element;
  node->next=head->next;
  head->next=node;
  return 1;
}
bool isEmpty(){
  return head->next==NULL;
}
E popStack(Node head){
  Node tmp=head->next;
  E e=tmp->element;
  head->next=head->next->next;
  free(tmp);
  return e;
}
-------------------------------------------------------
//队列FIFO:一般采用循环队列，牺牲一个单元用于判断满否
//顺序表实现队列
struct Queue{
  E * array;
  int capacity;
  int rear,front;
};
typedef struct Queue * ArrayQueue;
bool initQueue(ArrayQueue queue){
  queue->array=malloc(sizeof(E)*10);
  if(queue->array==NULL)return 0;
  queue->capacity=10;
  queue->front=queue->rear=0;
  return 1;
}
bool offerQueue(ArrayQueue queue,E element){
  if((queue->rear+1)%queue->capacity==queue->front)return 0;//队列满
  queue->rear=(queue->rear+1)%queue->capacity;//队列不满时，对队尾的序号和空间赋值
  queue->array[queue->rear]=element;
  return 1;
}
bool isEmpty(ArrayQueue queue){
  return queue->rear==queue->front;
}
E pollQueue(ArrayQueue queue){
  queue->front=(queue->front+1)%queue->capacity;//出栈后移
  return queue->array[queue->front];//返回
}
//链表实现队列
struct ListNode{
  E element;
  struct ListNode * next;
};
typedef struct ListNode * Node;
struct Queue{
  Node front,rear;
};//链表由结点组成，队列需要两个结点来完成FIFO
typedef struct Queue * LinkedQueue;
bool initQueue(LinkedQueue queue){
  Node node = malloc(sizeof(struct LNode));//申请
  if(node==NULL)return 0;
  queue->rear=queue->front=node;
  return 1;
}
bool offerQueue(LinkedQueue queue,E element){//头结点不存数据
  Node node=malloc(sizeof(struct LNode));
  if(node==NULL)return 0;
  node->element=element;
  queue->rear->next=node;//把当下这个尾结点的下一个位置插入node
  queue->rear=node;//node变成新的尾结点
  return 1;
}
E pollQueue(LinkedQueue queue){
  Node tmp=queue->front->next;//临时结点存储要出列的值，注意头结点不存储值
  E e=queue->front->element;
  queue->front->next=queue->front->next->next;//结点后移
  if(queue->rear==node)queue->rear=queue->front;//队尾队首相撞修改尾结点
  free(node);//释放结点
  return e;
}//isEmpty略
-------------------------------------------------------------------
//链表实战
//LeetCode83.删除排序链表中重复元素
struct ListNode* deleteDuplicates(struct ListNode* head) {
  if(head==NULL)return NULL;//空链表
  struct ListNode * node=head;
  while(node->next!=NULL){
    if(node->val==node->next->val)//相同时不移指针只删除一次重复值
      node->next=node->next->next;
    else
      node=node->next;//指针移到下一个位置开始另一个数的去重
  }
  return head;
}
//LeetCode206.反转链表
struct ListNode* reverseList(struct ListNode* head) {//注意这里的头结点不为空
  struct ListNode* newHead=NULL,* tmp;//建立了一个新链表和一个临时结点
  while(head){
    tmp=head->next;//临时结点暂存旧链表的下一个结点，也就是即将成为新头的点     eg.tmp存储3的位置
    head->next=newHead;//头结点原本指向下一个结点现在指向新链表表头，就和原来链表断开连接，同时与newHead建立连接   eg.2原来指向3现在改为指向1
    newHead=head;//新链表表头赋值为被断开的结点   eg.2变成新的头（现在指向1）
    head=tmp;//旧链表指向新头   eg.新头是3
//这里的理解就是重在把->指向的左方要理解成1指向2而不是直接就是2，把head当成被切割下来的结点
  }
  return newHead;
}
//LeetCode61.旋转链表
struct ListNode* rotateRight(struct ListNode* head, int k) {
  if(head==NULL || k==0)return head;//空表或者不动表
  struct ListNode* node=head,*res;
  int len=1;
  while(node->next){
    node=node->next;
    len++;
  }
  if(k%len==0)return head;//不动表
  //动表并且切开
  node->next=head;//求出链表长度并且连成环形
  for(int i=0;i<len-k%len-1;i++)head=head->next;//目标是把head移动到新头结点的前一个结点，len-k%len然后-1次
  res=head->next;
  head->next=NULL;
  return res;
}
//LeetCode20.有效的括号
bool isValid(char* s) {
  struct LNode head;
  initStack(&head);
  int len=strlen(s);
  if(len%2!=0)return 0;
  for(int i=0;i<len;i++){
    char c=s[i];
    if(c=='{' || '[' || '(')
      pushStack(&head,c);
    else{
      if(isEmpty(&head))return 0;//右边符号多于左边
      if(c==')'&&popStack(&head)!='(') return 0;
      else if(c==']'&&popStack(&head)!='[') return 0;
      else if(c=='}'&&popStack(&head)!='{') return 0;
    }
  }
  return isEmpty(&head);//为空结束不为空说明左边大于右边
}//用栈，左边入栈，右边匹配
//第k个缺失的正整数
int findKthPositive(int* arr, int arrSize, int k){
  int j=1,i=0;
  while(i<arrSize){//i是数组下标
    if(arr[i]!=j)//j是从一开始的数
    {  if(--k==0)return j;}//当k为0时返回arr[i]
    else i++;//相等时i就要向后移动
    j++;//无论相等与否每比较完一次j就向后移动一次
    //注意j!=arrSize因为i不是每次都加1
  }
  return j+k-1;//超出arrSize范围则直接算
//j此时为arr[arrSize-1]+1，此时k已经减去不相等的数，这样再相加，减去1
//这里为什么+1的解析：最后一次比较一定是相等的，此时j=arr[arrSize-1]，运行完这一步后i++和j++，故而+1
}
int findKthPositive(int* arr, int arrSize, int k){
  if(arr[0]>k)return k;//根本不在中间的特殊情况
  int l=0,r=arrSize;
  while(l<r){//二分比较
    int mid=(l+r)/2;
    if(arr[mid]-mid-1>=k){r=mid;}//右边不相等的个数超过k则
    else l=mid+1;
  }
  return k-(arr[l-1]-(l-1)-1)+arr[l-1];
}
